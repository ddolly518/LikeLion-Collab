MVC 패턴 활용한 서비스 컴포터넌트를 콘솔에서 실행:

view -> controller -> model [service, dao] -> JDBCTemplate -> db

CREATE TABLE IF NOT EXISTS person (
	name VARCHAR(50) PRIMARY KEY,
    address VARCHAR(100),
    phone VARCHAR(20)
);


MyPersonAPP /src
				|com.person.controller.PersonController 	-- [7]
                |com.person.dao.PersonDao(I)				-- [4]
                |com.person.dao.PersonDaoImple(C)
                |com.person.model.Person					-- [3]
                |com.person.service.PersonService(I)		-- [5]
                |com.person.service.PersonServiceImple(C)
                |com.person.view.PersonConsoleView			-- [6] 전체 출력 코드 / 알림코드
                |common.JDBCTemplate						-- [2]
                |db.properties								-- [1]
			/lib
				/mysql-connector-j-9.1.0.jar


HOMEWORK:
4월 11일 -> 공유폴더 2개 
        1폴더:	Workshop07_java.pdf, Workshop09_java.pdf, Workshop13java.pdf, 4개프로시저,
        		notice 09_StudentMVC.png :: 홍길동_java.zip

        2폴더:	05.WorkShop_CONSTRAINTS.PDF :: 홍길동_db.zip [홍길동_db.sql]
        
 
 MyPersonApp
├── lib
│   └── mysql-connector-j-9.1.0.jar
└── src
    └── com
        └── person
            ├── controller
            │   └── PersonController.java  	-- [7]
            ├── dao
            │   ├── PersonDao.java (I)     	-- [4]
            │   └── PersonDaoImpl.java (C)
            ├── model
            │   └── Person.java          	-- [3]
            ├── service
            │   ├── PersonService.java (I) 	-- [5]
            │   └── PersonServiceImpl.java (C)
            ├── view
            │   └── PersonConsolView.java  	-- [6] 전체 출력 코드 / 알림코드
            └── common
                └── JDBCTemplate.java      	-- [2]
    └── db.properties                  		-- [1]
    
    ===============================================================================================================
    1. model의 클래스들은 record로 구현되어 필드 생성자와 getter만 구성됨을 확인
    
    2. com.mysqlapp.dao의 클래스들을 try~with~resources 구문을 사용한 것을 확인 후
    JDBCTemplate에서 close() 구현 사용 중 반드시 finally{ close(conn); } 명시 확인
    
    3. try~with~resources 구문을 사용한 객체는 finally{ close() }를 명시하지 않아도 된다.
    -> 코드 간결, 누수 방지용
    
    ===============================================================================================================
    4월17일목요일
    
    com.set17.tcpexam		-> 	1:1	통신 serverSocket.accept(0로 단일연결 처리
    com.set17.tcpexam02		-> 	1:N	가상스레드 접목 통신 : 여러명의 클라이언트 접속 시 동시처리
    							Thread.startVirtualThread(() -> handleClient(clientSocket));
    
    com.set17.tcpexamp03	-> 	1:N	클라이언트 IP, 포트, 접속시간 기록, 클라이언트 고유 ID 출력 후 로그 파일 생성하기
    
    
  