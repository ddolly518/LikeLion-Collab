3-1) GridFs updload methods:
  fs.files: saves metadata for file
  fs.chunks: saves files in set sizes

3-2) GridFs download method:


Q1) Help:
mongofiles --help

Q2) upload text file:
mongofiles --db myFile put a.txt

Q3) upload apple file:
mongofiles --db myFile put apple.jpg

Q4) check file list
mongofiles --db myFile list

Q5) download file:
mkdir res
cd res
mongofiles --db myFile get a.txt

// or download file in a directory of your choice with the name of your choice:

mongofiles --db myFiles get a.txt --local res/a.txt 
mongofiles --db myFiles get a.txt --local res/b.txt

Q6) get all files at once
mkdir res02
cd res02
mongofiles --db myFile get a.txt apple.jpg 

* Wild cards *.* don't work.

Q7) put a.txt apple.jpg
mongofiles --db myFile put a.txt apple.jpg

* Appended not overwritten!!!

	•	fs is the default prefix used by GridFS.
	•	So db.fs.files.find() is really:
	•	The collection fs.files within the current database (in your case, myFile).
	•	GridFS splits a file into chunks and stores them in fs.chunks, while the file’s metadata goes into fs.files.


Q8) upload mutiple files
Mac:
for f in *.txt *.jpg; do
mongofiles --db myFile put "$f"
done

Q9) delete files from GridFs storage:
mongofiles --db myFile delete a.txt apple.jpg

Q10) use shell to delete multiple files
for f in *.txt *.jpg; do
mongofiles --db myFile delete "$f"
done


Q11) try out put_id
mongofiles --db myFile put_id a.txt a0001
mongofiles --db myFile put_id apple.jpg a0002
mongofiles --db myFile put_id banana.jpg a0003

Q12) try get_id to download to res/
mongofiles --db myFile get_id a0001 --local res/a_download.txt
mongofiles --db myFile get_id a0002 --local res/apple_download.jpg
mongofiles --db myFile get_id a0003 --local res/banana_download.jpg
mongofiles --db myFile get_id a0003 --local res/banana_download.png

Q13) try delete_id to delete files from GridFs 
mongofiles --db myFile delete_id a0001
mongofiles --db myFile delete_id a0002
mongofiles --db myFile delete_id a0003

Q14) search: search all files: 'filename' is a regex which listed filenames must match
get_regix - get files matching the supplied 'regex'

mongofiles --db myFile search a.txt
mongofiles --db myFile search "^a*\.jpg"

Q15) use get_regex command to download file
mongofiles --db myFile get_regex "^a.*\.jpg"


Other Examples:
mongofiles -d=myFile list
mongofiles -d=myFile put <file>
mongofiles -d=myFile get <file>
mongofiles -d=myFile get_id '{"$oid":"684b8e5904153a137e849437"}'







Example:
mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile put a.txt
2025-06-13T09:35:59.470+0900    connected to: mongodb://localhost/
2025-06-13T09:35:59.471+0900    adding gridFile: a.txt

2025-06-13T09:35:59.566+0900    added gridFile: a.txt

myFile> show tables
fs.chunks
fs.files

myFile> db.fs.files.find()
[
  {
    _id: ObjectId('684b726f654a877cca14af68'), // need to be the same as the files_id in chunks
    length: Long('241'),
    chunkSize: 261120,
    uploadDate: ISODate('2025-06-13T00:35:59.565Z'),
    filename: 'a.txt',
    metadata: {}
  }
]

myFile> db.fs.chunks.find()
[
  {
    _id: ObjectId('684b726f654a877cca14af69'),
    files_id: ObjectId('684b726f654a877cca14af68'), // need to be the same as the related files
    n: 0,
    data: Binary.createFromBase64('QUJDREVGR0hJSktMTU4g7ZWc6riA7J20656A64ukIDEyMzQ1Njc4OTAKbGlzdCA8cHJlZml4PgpMaXN0cyB0aGUgZmlsZXMgaW4gdGhlIEdyaWRGUyBzdG9yZS4gVGhlIGNoYXJhY3RlcnMgc3BlY2lmaWVkIGFmdGVyIGxpc3QgKGUuZy4gPHByZWZpeD4pIG9wdGlvbmFsbHkgbGltaXQgdGhlIGxpc3Qgb2YgcmV0dXJuZWQgaXRlbXMgdG8gZmlsZXMgdGhhdCBiZWdpbiB3aXRoIHRoYXQgc3RyaW5nIG9mIGNoYXJhY3RlcnMuCg==', 0)
  }
]

mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile list
2025-06-13T09:58:29.018+0900    connected to: mongodb://localhost/
a.txt   241
apple.jpg       9255


mini➜  res git:(main) ✗ cd ..
mini➜  Lab03Class git:(main) ✗ tree
.
├── a.txt
├── apple.jpg
├── banana.jpg
├── notice.txt
└── res
    └── a.txt

2 directories, 5 files
mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile get b.txt
2025-06-13T10:05:32.217+0900    connected to: mongodb://localhost/
2025-06-13T10:05:32.218+0900    Failed: requested files not found: [b.txt]
mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile get a.txt --local res/b.txt
2025-06-13T10:05:51.030+0900    connected to: mongodb://localhost/
2025-06-13T10:05:51.033+0900    finished writing to res/b.txt

mini➜  Lab03Class git:(main) ✗ tree
.
├── a.txt
├── apple.jpg
├── banana.jpg
├── notice.txt
└── res
    ├── a.txt
    └── b.txt

2 directories, 6 files


mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile put a.txt apple.jpg
2025-06-13T10:16:46.139+0900    connected to: mongodb://localhost/
2025-06-13T10:16:46.139+0900    adding gridFile: a.txt

2025-06-13T10:16:46.141+0900    added gridFile: a.txt

2025-06-13T10:16:46.141+0900    adding gridFile: apple.jpg

2025-06-13T10:16:46.142+0900    added gridFile: apple.jpg

Q8) example:
mini➜  Lab03Class git:(main) ✗ for ffor f in *.txt *.jpg; do
mongofiles --db myFile put "$f"
done


2025-06-13T10:54:10.606+0900    connected to: mongodb://localhost/
2025-06-13T10:54:10.606+0900    adding gridFile: a.txt

2025-06-13T10:54:10.609+0900    added gridFile: a.txt

2025-06-13T10:54:10.620+0900    connected to: mongodb://localhost/
2025-06-13T10:54:10.621+0900    adding gridFile: notice.txt

2025-06-13T10:54:10.622+0900    added gridFile: notice.txt

2025-06-13T10:54:10.636+0900    connected to: mongodb://localhost/
2025-06-13T10:54:10.636+0900    adding gridFile: apple.jpg

2025-06-13T10:54:10.637+0900    added gridFile: apple.jpg

2025-06-13T10:54:10.649+0900    connected to: mongodb://localhost/
2025-06-13T10:54:10.650+0900    adding gridFile: banana.jpg

2025-06-13T10:54:10.655+0900    added gridFile: banana.jpg

Q9) exmple:
mini➜  Lab03Class git:(main) ✗
mongofiles --db myFile delete a.txt apple.jpg
2025-06-13T10:56:32.357+0900    too many non-URI positional arguments (If you are trying to specify a connection string, it must begin with mongodb:// or mongodb+srv://)
2025-06-13T10:56:32.357+0900    try 'mongofiles --help' for more information
mini➜  Lab03Class git:(main) ✗      mongofiles --db myFile delete apple.jpg
2025-06-13T10:57:10.469+0900    connected to: mongodb://localhost/
2025-06-13T10:57:10.473+0900    successfully deleted all instances of 'apple.jpg' from GridFS

mini➜  Lab03Class git:(main) ✗ mongofiles --db myFile delete a.txt
2025-06-13T10:57:28.919+0900    connected to: mongodb://localhost/
2025-06-13T10:57:28.921+0900    successfully deleted all instances of 'a.txt' from GridFS

myFile> db.fs.files.find({}).itcount()
8
myFile> db.fs.files.find({}).itcount()
5
myFile> db.fs.files.find({}).itcount()
2
myFile> db.fs.files.find({})
[
  {
    _id: ObjectId('684b84c292453e053d388ab8'),
    length: Long('3708'),
    chunkSize: 261120,
    uploadDate: ISODate('2025-06-13T01:54:10.622Z'),
    filename: 'notice.txt',
    metadata: {}
  },
  {
    _id: ObjectId('684b84c2458f14c83d724a5a'),
    length: Long('6762'),
    chunkSize: 261120,
    uploadDate: ISODate('2025-06-13T01:54:10.655Z'),
    filename: 'banana.jpg',
    metadata: {}
  }
]

Q10) Example
mini➜  Lab03Class git:(main) ✗ for ffor f in *.txt *.jpg; do
mongofiles --db myFile delete "$f"
done
2025-06-13T11:00:24.312+0900    connected to: mongodb://localhost/
2025-06-13T11:00:24.313+0900    successfully deleted all instances of 'a.txt' from GridFS

2025-06-13T11:00:24.326+0900    connected to: mongodb://localhost/
2025-06-13T11:00:24.328+0900    successfully deleted all instances of 'notice.txt' from GridFS

2025-06-13T11:00:24.341+0900    connected to: mongodb://localhost/
2025-06-13T11:00:24.342+0900    successfully deleted all instances of 'apple.jpg' from GridFS

2025-06-13T11:00:24.356+0900    connected to: mongodb://localhost/
2025-06-13T11:00:24.358+0900    successfully deleted all instances of 'banana.jpg' from GridFS


myFile> db.fs.files.find({}).itcount()
6
myFile> db.fs.files.find({}).itcount()
0


======================================================================
mongoimport mongoexport  

Q1. Score  컬렉션을 myscore.json으로 다운받자  
D:\myWork\mymongo\Lab03>> mongoexport  --db mydb  -c Score   --out myscore.json 
D:\myWork\mymongo\Lab03>>type myscore.json
==> mac cat myscore.json


Q2. newdb라는 db에   Uscore라는 컬렉션으로  myscore.json 를 업로드 하자.  
mongoimport  --db newdb  -c Uscore   --file  myscore.json

Q3. Q2에서 임포트 한것을 다시  myscore_res.json으로 export  하자  
    mongoexport  --db newdb  -c Uscore   --out myscore_res.json 

Q4. newdb라는 db에   Uscore을   myscore.csv로 다운로드 받자 --type=csv
mongoexport  --db newdb  -c Uscore   --out myscore.csv

파일은 생성되고  문서( 내용)은 --fields 옵션이 필수로   실행오류
mongoexport  --db newdb  -c Uscore  --type=csv --out myscore01.csv

mongoexport  --db newdb  -c Uscore  --type=csv --fields name,eng,mat --out myscore01.csv

Q5. Extract name, eng from myscore01.csv and upload MScore to newdb
mongoimport --db newdb -c MScore --type=csv --fields name,eng --file myscore01.csv


Q6. import doc sample file
mongoimport --db newdb --collection=contacts --type=csv --columnsHaveTypes --fields="name.string(),birthdate.date(2006-01-02),contacted.boolean(),followerCount.int32(),thumbnail.binary(base64)" --file=file.csv

This long mongoimport command is used to import a CSV file into a MongoDB collection, with detailed type specifications for each field. Let’s break it down step-by-step:

⸻

🔧 Full Command:

mongoimport --db newdb --collection=contacts --type=csv \
--columnsHaveTypes \
--fields="name.string(),birthdate.date(2006-01-02),contacted.boolean(),followerCount.int32(),thumbnail.binary(base64)" \
--file=file.csv


⸻

📌 Breakdown:

Part	Meaning
--db newdb	Target MongoDB database is newdb.
--collection=contacts	Import into the contacts collection.
--type=csv	Specifies the input file is CSV format.
--columnsHaveTypes	Tells MongoDB that the --fields option will include type annotations.
--fields=...	Explicitly defines the fields and their data types for import.
--file=file.csv	The actual file to import is file.csv.


⸻

🧪 --fields Option (Field Types):
	•	name.string() → Import as a string.
	•	birthdate.date(2006-01-02) → Import as a date using the YYYY-MM-DD format.
	•	contacted.boolean() → Import as a boolean (true/false).
	•	followerCount.int32() → Import as a 32-bit integer.
	•	thumbnail.binary(base64) → Import as binary data, encoded using Base64.

⸻

✅ When and Why You Use This
	•	When your CSV data includes multiple data types and you want precise control over how each column is interpreted.
	•	When importing images (e.g., thumbnails) or structured data (e.g., dates, booleans) into MongoDB from an external CSV.

⸻

📁 Example CSV (with matching headers):

name,birthdate,contacted,followerCount,thumbnail
Alice,1990-05-20,true,1200,aGVsbG8gd29ybGQ=
Bob,1985-10-11,false,900,c2FtcGxlIGltYWdl


