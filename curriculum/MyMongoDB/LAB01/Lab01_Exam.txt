============== 기본조회 및 조건 필터링 ==========================

-- Q1. 사원 테이블에서 '부서번호'와 '사원 이름'을 모두 출력해보자. 단 별칭으로 출력하자.
// change table name
use myemp;

use admin;
db.runCommand({
  renameCollection: "myemp.testemp",
  to: "myemp.emp",
  dropTarget:true
})

// solution
db.emp.find({}, {_id:0, deptno:1, ename:1})

// alias means changing field name (use aggregate)
db.emp.aggregate([
  {$project: { _id:0, 부서번호:"$deptno", 사원이름:"$ename"}}
])

-- Q2. 부서번호가 10번인 사원의 모든 정보를 출력해보자.
db.emp.find({deptno:10},{_id:false})
db.emp.find({deptno:10},{_id:0})

db.runCommand({
  find:"emp",
  filter:{deptno:10},
  projection:{_id:0}
});


-- Q3. 급여가 3000 이상인 사원의 사번(empno), 이름(ename), 급여(sal)를 출력해보자.

db.emp.find({sal:{$gte:3000}},{_id:0, empno:1, ename:1, sal:1})

db.runCommand({
  find:"emp",
  filter:{sal:{$gte:3000}},
  projection:{_id:0,empno:1,ename:1,sal:1}
});



-- Q4. 직업이 'MANAGER'인 사원의 이름과 직업를 출력해보자.
-- Q5. 입사일이 1985년 이후인 사원의 이름과 입사일을 출력해보자.
// needs ISODate Type for hiredate field for following command to work
db.emp.find(
  {hiredate: {$gt:new ISODate("1985-01-01T00:00:00Z")}},{_id:0,ename:1,hiredate:1}
)

// let's change hiredate string to ISODate type!
// condition1: find the hiredate field and select string field
hiredate:{$exists: true, $type: "string"}
// condition2: change the previous field to ISODate $toDate
$set:{
  hiredate: {$toDate:"$hiredate"}
}

db.emp.updateMany(
  { hiredate: { $exists: true, $type: "string" } },
  [
    {
      $set: {
        hiredate: { $toDate: "$hiredate" }
      }
    }
  ]
);

db.emp.find({hiredate:{$gt:new Date("1985-01-01")}},{_id:0,ename:1,hiredate:1});


db.emp.find({hiredate:{$gt:"1985-01-01"}},{_id:0,ename:1,hiredate:1});


-- Q6. 급여가 2000 이상이면서 직무가 'SALESMAN'인 사원의 이름과 급여, 직업를 출력해보자.
db.emp.find({sal:{$gte:2000}, job:"SALESMAN"},{_id:0,ename:1,sal:1,job:1});
db.emp.find({sal:{$gte:2000}, job:"MANAGER"},{_id:0,ename:1,sal:1,job:1});

-- Q6-1 급여가 2000 이상 OR 직무가 'SALESMAN'인 사원의 이름과 급여, 직업를 출력해보자.
db.emp.find(
  { $or: [ { sal: { $gte: 2000 } }, { job: "SALESMAN" } ] },
  { _id: 0, ename: 1, sal: 1, job: 1 }
);


-- Q7. 커미션이 NULL이거나 급여가 2000 이상인 사원의 이름과 급여, 커미션을 출력해보자.
**javascript file: load("...")
db.emp.aggregate([{
  $match:{ 
		$or:[
			{comm:{$eq:""}},
                {sal:{$gte:2000}}
               ]
           }
},
{
  $project:{
    _id:0,
    ename:1,
    sal:1,
    comm:{
        $cond:{if:{$eq:["$comm",""]},then:"N/A",else:"$comm"
    }
  }
}
}
]).forEach(element => {
   print(element.ename+","+element.sal+","+element.comm) 
});

-- 단, 커미션이 없으면 없다고 출력을 해보자.
SELECT ENAME, SAL,
  CASE
    WHEN COMM IS NULL OR COMM = "THEN 'N/A'
    ELSE COMM
  END AS RES
FROM
  EMP
WHERE
  COMM IS NULL OR COMM = " OR SAL >= 2000;


-- Q8 사원의 이름과 매니저를 출력하자, 단 매니저가 없으면 '없음'으로 출력해보자. 
db.emp.aggregate([{
            $project: {
                _id: 0,
                ename: 1,
                mgr: {
                    $cond: {
                        if: {
                            $eq: ["$mgr", ""]
                        },
                        then: "N/A",
                        else: "$mgr"
                    }
                }
            }}]);



==============집계 함수========================================

-- Q1.사원 테이블의 봉급을 이용해서 집계함수를 출력 해보자.
SELECT MAX(SAL) MAX_SAL, MIN(SAL) MIN_SAL, SUM(SAL) TOTAL_SAL, AVG(SAL) AVG_SAL, COUNT(*) EMP_COUNT
FROM EMP;

db.emp.aggregate([
{
  $group:
  {
    _id:null,
    MAX_SAL:{$max:"$sal"},
    MIN_SAL:{$min:"$sal"},
    TOTAL_SAL:{$sum:"$sal"},
    AVG_SAL:{$avg:"$sal"},
    EMP_COUNT:{$sum:1}
  }
},
{
  $project:{
    _id:0,
}
}
]).forEach(element => {
  print("Max: " + element.MAX_SAL + "\nMin: " + element.MIN_SAL + "\nAvg: " + element.AVG_SAL + "\nCount: " + element.EMP_COUNT)
});



-- Q2 사원테이블에서 부서 번호가 10번인 사원의 평균 월급을 구해보자.
SELECT AVG(SAL)
FROM EMP
WHERE DEPTNO = 10;

db.emp.aggregate([
  {$match:{deptno:10}},
  {$group:{_id:"Dept 10", AVG_SAL:{$avg:"$sal"}}
},
{
  $project:{
    _id:0, DEPT:"$_id", AVG_SAL:1
}
}
]).forEach(element => {
  print("DEPT" + element.DEPT + ", Avg: " + element.AVG_SAL)
});


-- Q3  사원테이블에서 부서 번호가 10,30번인 사원의 월급의 합을 구하자.
db.emp.aggregate([




-- Q4  직업이 세일즈맨인 사원의 평균 월급과 월급의 합을 구해보자.
-- Q5  봉급이  3000 이상 5000 이하의 월급을 몇명이 받는지 개수를 출력해보자.





Warmup exercise (Try in VS Code)
db.students.aggregate([
  {
    $match: { // 1. 먼저 '수학' 과목이 있고 90점 이상인 학생을 필터링합니다.
      "grades": {
        "$elemMatch": {
          "subject": "수학",
          "score": { "$gte": 90 }
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      // 2. grades 배열에서 '수학' 과목이 90점 이상인 성적만 필터링합니다.
      filteredGrades: {
        $filter: {
          input: "$grades",
          as: "grade",
          cond: {
            $and: [
              { $eq: ["$$grade.subject", "수학"] },
              { $gte: ["$$grade.score", 90] }
            ]
          }
        }
      }
    }
  },
  {
    $project: {
      name: 1,
      // 3. 필터링된 배열의 첫 번째 요소를 추출합니다. (Q1에서는 해당 과목 성적만 출력하므로)
      mathGrade: { $arrayElemAt: ["$filteredGrades", 0] }
    }
  }
])



db.students.aggregate([
  {
    $project: {
      name: 1,
      grades: {
        $filter: {
          input: "$grades",
          as: "g",
          cond: {
            $and: [
              { $eq: ["$$g.subject", "수학"] },
              { $gte: ["$$g.score", 90] }
            ]
          }
        }
      }
    }
  },
  {
    $match: {
      grades: { $ne: [] }
    }
  }
])