<< 스레드 프로그래밍>> 

1. 스레드란?
- 프로세스: 실행 중인 프로그램, 독립된 메모리 공간 가짐.
- 스레드: 프로세스 내 실행 흐름 단위, 자원 공유, 동시에 동작 가능.
- 멀티태스킹: 여러 프로세스가 동시에 실행.
- 멀티스레딩: 하나의 프로세스 안에서 여러 스레드가 동시에 실행됨.

2. 자바에서 스레드를 쓰는 이유
- 동시성 향상: UI 응답성, 백그라운드 작업 처리 등.
- 자원 활용 증가: 블로킹 상황에서도 다른 스레드가 실행 가능.
- 복잡한 작업 분할: 유지보수 용이, 병렬 처리 가능.

3. 주요 클래스/인터페이스
- Thread: 스레드 생성 및 실행.
- Runnable: 실행 코드 정의 인터페이스.

- java.util.concurrent: ExecutorService, Future, Callable 등 고수준 유틸리티.
- java.util.concurrent.locks: 명시적 Lock, Condition.
- java.util.concurrent.atomic: AtomicInteger 등 원자 변수 클래스.

4. 스레드 생성 방법
case01:  Thread 상속
  - run() 오버라이드, start()로 실행.
case02:  Runnable 구현
  - Thread 생성자에 Runnable 전달.
case03: 람다 표현식 (Runnable은 함수형 인터페이스)

4-1. Thread의 종류	d_exam.java
메인 스레드 main() (일반 스레드 포함): 주요흐름 담당 (프로그램이 지니고 있는 진입점) / 일반 스레드가 모두 종료되면 종료 / 
데몬 스레드 = 백그라운드 스레드 : 스레드의 보조역할 (자동저장, GC, 로그 생성, 모니터링 등) / 모든 작업 후 자동종료 


5. 스레드 상태	: Enum Thread.State 	: Thread.getState()	d_ThreadState.java
- NEW: 생성만 됨
- RUNNABLE: 실행 준비됨
- BLOCKED: 락 대기 중
- WAITING: 무한 대기 중
- TIMED_WAITING: 시간 제한 대기
- TERMINATED: 실행 종료

6. 스레드 제어 메서드
- start(), run(), sleep(), join(), interrupt()
- isAlive(), getName(), setName(), currentThread()

7. 동기화 기초
- 경쟁 조건 방지 → synchronized 사용
	- 멀티스레드 환경에서 공유 자원에 대한 동시 접근을 제어하고 스레드 간의 동기화를 보장하는 키워드
	- 여러 스레드가 동시에 공유 자원에 접근하여 발생하는 데이터 불일치, 경쟁 조건 (race condition) 등의 문제를 해결한다.
- 임계 영역 설정 → 한 번에 하나의 스레드만 접근 가능
- 예시: Counter 클래스에서 synchronized로 카운터 보호
[선언방법]
	1. 메서드 전체에 synchronized 적용
	public synchronized void methodName() {
	// 임계 영역 코드
		// 파일을 다운로드 받고 있다.
	}
	2. 특정 코드 블록에 synchronized
	public void methodName() {
		synchronized (lockObject) {
			// 파일을 다운로드 받고 있다.
		}
	}
	class 파일다운로드 클래스 {
		public void methodName() {
		//파일을 다운로드 받고 있다. -임계 영역
		}
	}
8. JDK 21 새로운 기능
- Virtual Threads (가상 스레드, Project Loom)
  → 경량 스레드, 대량 동시성, 기존 API와 호환성 있음
  
  - Virtual Threads
  	1. 운영체제 스레드에 직접적으로 매핑되지 않는다.
  	2. JVM에서 가상으로 운영체제 스레드를 만들어서 스케줄링 한다.
  	3. 수천개의 가상스레드 -> JVM OS thread [코루틴 방식]
  	4. 블로킹 호출 시에서 JVM이 자동으로 스레드에서 다른 작업으로 전환한다.
  	
  	일반 스레드는 OS(천단위 동접)에서 직접 처리하고 Virtual Threads(수십만 단위 동접)는 JVM에서 처리한다. 
  	
  	Thread.Builder로 체크
  	플랫폼 스레드=일반 스레드(PlatformThread): 1:1 운영체제 매핑, 블로킹 처리는 자원 점유 후 대기 / CPU 바운드 작업
  	가상 스레드(Virtual Thread): JavaVM 관리, 블로킹 처리는 일시 중단 후 다른 스레드 생성 / IO 바운드 작업 

9. 추가적인 요소  
- ExecutorService, Future, Callable
- Lock, Condition, Atomic 변수
- Thread Pool
- 데드락 방지
- 스레드 안전 컬렉션 등
i_ExecutorServiceExample.java : 	고정 크기 스레드 풀 사용 -> Executor, submit, shutdown

j_FutureCallableExample.java	 : Future와 Callable 결과 반환 -> Future, Callable<T>, get() -> 리턴값 있는 비동기
	-> 결과 대기 중 상태값을 측정하고 싶을 때, 타임아웃 처리 하고 싶을 때 
	
k_LockConditionExample.java	 : 교착상태 해결, Lock과 Condition 활용 -> Lock, Condition, await/signal
	하나의 스레드는 await()으로 대기 / 다른 스레드는 signal()로 깨움 
	java.lang.Object wait()대기 / notify() 깨움
	
	 

l_AtomicExample.java	 : AtomicInteger를 활용한 안전한 증가

m_DeadlockFreeExample.java	: 데드락 방지를 위한 락 순서 고정

n_ConcurrentMapExample.java	:ConcurrentHashMap 예제

10. 주의사항
- 설계 복잡성 증가 주의
- 동기화 없이는 공유 자원 안전 보장 어려움
- 과도한 스레드 생성 → 자원 낭비 → 스레드 풀 권장

11. 개념 정리 << 작업은 Executor / 동기화는 synchronized가 처리한다 >>

Executor [누가 일할지 결정]: 작업관리자[스레드 풀] -> 스레드 생성과 실행 시점 
	=> Executor -> ExecutorService -> submit(Runnable or Callable) -> 스레드 풀에서 스레드를 가져와서 실행

synchronized [동시에 들어오지 못하게 문을 잠근다]: 작업 시 공유 자원의 접근제어 -> 스레드 경쟁 조건 방지 / 일관성 보장 
	=> 공유 작원 -> synchronized, Lock, Atomic 등 -> 스레드간의 동시 접근 제어 
	





















