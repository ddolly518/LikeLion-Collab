2025-02-28 (4일차)
- com.test  <<클래스 만들기, 메소드 호출해보기 >>

	메소드 선언 및 호출
		-접근 제한자 static 리턴데이터타입 userName(){}   	
		
		java.lang.Thread'sleep() //java.lang.Thread클래스의 sleep메소드
		** public static void sleep(long millis)throws InterruptedException 
		->메소드 뒤에 선언되는 throws 키워드는 프로그램이 발생되는 상황을 클래스로 생성해서 JVM이 알려주는 예외처리 위임
		
		
		-리턴데이터타입 [7가지 기본 자료형과 참조자료형 / void ]
	public static void prn() { //void : 리턴값이 없음
		System.out.println("안녕하세요");
	}

	-호출 : 클래스명.메소드
	-public static void userName(매개인자*){} //매개인자가 없을 때 void
	
	-public static datatype UserName(매개인자*){ //매개인자가 있으면 datatype지정
		return datatype_ value;
	}
	
- com.sec01 << 기본 자료형, 값 >>
	https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
 	DataType.java - boolean 타입 확인	

	***핵심 : 01_exam.png 풀 수 있어야함
	--------------------------------------

2025-03-04=================================
- com.sec02
Wrapper class : 기본 데이터 타입을 객체로 다루기 위해 제공되는 클래스 - java.lang패키지에 속함.
Boxing : 기본형 -> 래퍼 객체 변환 (Integer.valueOf(10))
Unboxing : 래퍼 객체 -> 기본형 변환 (obj.intValue())
Auto-Boxing : Integer obj = 10; (자동 변환) jdk에 자동으로 변환시키는 기능이 있음
Auto-unboxing : int num = obj; (자동 변환)	
	
	
2025-03-05=================================
- com.sec03
기본 클래스(원시 클래스) 선언, 생성, 멤버 호출 
class - userDataType   (풀캡슐화. 모든 멤버를 외부에서 철저하게 차단시킴) : 자주 사용하는 변수와 메소드를 하나의 이름으로 등록해서 필요할 때마다 생성해서 사용하는 것
	  - 선언된 멤버변수는 은닉(접근제한자 private)하고 오픈된(public) 메소드를 통해 값 전달 및 변경하고(setter) 리턴하는(getter) 구조를 가짐.
	  - 멤버 = 필드(final이 붙은 상수 등)+메소드(생성자,기능을 가짐)
		
	[선언방법]
클래스타입-> 접근제한자[abstract] class userName{
			필드+메소드
		
		 }
	
ex) 정수 두 수를 관리하는 Test클래스를 만들어보자.
class Test{
	//	int a, b; //앞에 아무것도 명시하지 않으면 default.
		private int a; //자주 사용하는 멤버 변수 은닉화
		private int b;
		
		//setter   값을 전달, 변경하겠다. -void 
		public void setA(int a){
			this.a = a; //전달 및 변경
		}
		public void setB(int b){
			this.b = b;
		}
		//getter
		public int getA(){
			return a; //this.a
		}
		public int getB(){
			return b; //this.b
		}
		
		=> 외부에서 메소드만 호출 할 수 있음.
		자바는 기본적으로 모든 멤버 변수는 private, 오픈하고 싶은 것은 상수만.
	
}
	

오버로딩 (Overloading) : 하나의 클래스 내에서 같은 이름의 메소드를 {매개변수 개수, 타입 다르게} 여러 개 정의하는 것
	목적 : 같은 기능을 다양한 입력값에 사용
오버라이딩 (OverRiding) : 상속 시 부모 클래스의 메소드를 자식 클래스에서 {메서드명, 매개변수, 반환 타입을 동일} 재정의하는 것
	목적 : 부모 클래스의 동작을 자식 클래스에서 변경해서 기능에 사용
	
	
생성자 (Constructor)
	-클래스 이름과 동일하되 반환형은 없음
	-오버로드 할 수 있음
	-생성자는 객체를 생성할 때 단 한번만 호출됨 new className(); -> 생성자 호출
	-메소드처럼 명시호출 할 수 없음	->객체.멤버 호출불가능
	-생성자는 상속 되지 않으며 객체를 생성할 때 단 한번 호출됨
	-생성자를 명시하징 않으면 기본 생성자가 호출되고 명시하면 명시된 생성자가 호출됨
	-생성자는 멤버변수 초기화를 목적으로 함           
	
2025-03-05=============================================
 -com.sec02 연산자
 -BitOperator.java
  진리지표확인, 각 래퍼클래스의 변환메소드 확인, String.format(), 비트 자리수 표현, 정수/실수 각각 리턴변환 메소드 API확인
  Nan 처리하는 메소드 확인 -> 변환값 확인

2025-03-11=============================================
 -com.sec07.myTest
 -단일 상속
 -getRes() 재정의 개념
 -상속관계 기본 생성자,  오버로드 생성자 추가
 -객체와 주소간의 영역 제한 
 -동적 바인딩 -> 캐스팅 
 -API를 확인 후 [상속구조, 필드, 메소드, 생성자 등] 상속을 받자.
 
 -com.sec07.mytest01
 	has-a 관계도를 확인 했다.		: 클래스가 다른 클래스의 객체를 포함한다. 
 		class my제어판{
 			private java.io.File  myfile:
 		}
 		
 	
 	is-a : 클래스가 다른 클래스를 상속 받는다.
 		class my extends File{}
 		
 
 ==========================================================================
 다이어그램 설치
 		
 https://download.eclipse.org/modeling/mdt/papyrus/updates/releases/2024-06
 
 -com.sec08
 -com.sec09
  예외처리 : 어떤 경우에 의해 실행 시 발생하는 프로그램이 강제종료하지 않도록 처리하는 것
  1) try~catch : 예외를 직접 처리하는 구문 (여러개의 catch - 경우의 수)
  2) finally : 예외발생 유무와 관계 없이 실행됨 (선택적으로 사용)	->예외가 나도, 나지않아도 무조건 실행되는 코드를 finally에 작성 / close() : 파일닫기, 리소스닫기, 로그아웃, 파일 백업(갑자기 컴퓨터가 꺼졌을 경우)
  3) throws : 메소드 뒤에 선언되며 호출하는 곳으로 예외처리 위임 
  4) throw : 예외 클래스를 명시 실행
  5) try - with - resource(jdk 7+) : finally없이 자동 리소스 해제
 
 ==========================================================================
 case 1 :
 		try {
 			예외가 발생될 코드
 		}catch(Exception e){}	//Exception은 클래스명
 		
 case 2 :
 		try {

			}catch(ArithmeticException name){ //자손이 예외를 못잡으면

			}catch(RuntimeException name){ //조상

			}catch(Exception name){    } //더 조상
	=>경우에 따라 예외처리하는 내용이 다름
 	
 case 3 :
 		try{
 		
 		}finally{}
 case 4 :
 	
  		try {

			}catch(ArithmeticException name){

			}catch(RuntimeException name){ 

			}catch(Exception name){    
			
			}finally{
			 		try{
 					}finally{}			//중첩 사용 가능
			}

 case 5 : try - with - resources : 자동으로 close() 호출하면서 참조한 리소스 소멸 (밑 2개의 인터페이스 사용)
 		java.lang.AutoCloseable
 		java.io.Closeable
 
	    try (FileReader fr = new FileReader(path)) {
	        return br.readLine();
	    }
	
	=================================================
	FileReader fr = null;
	try {
		 fr = new FileReader(path)			->위의 방법과 같은 의미
		}catch(Exception name){
		
		}finally{
			fr.close();
		}
 		
 		
 		
 		
 		
 		
 		
