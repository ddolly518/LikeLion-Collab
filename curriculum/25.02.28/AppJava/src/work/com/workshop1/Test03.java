package work.com.workshop1;

public class Test03 {

	public static void main(String[] args) {
		
		int num = 45678;
		int result = ((num / 1000) << 10) - 1080;
		
		System.out.println("기존 숫자: " + num);
		System.out.println("비트 연산 후 변환된 숫자: " + result);
		
		
		/* 
			기존 숫자: 45678
			비트 연산 후 변환된 숫자: 45000
		 	
		 	
		 	문제 풀이:
		 	Java에서 << 연산자는 left shift 연산자로, bit를 왼쪽으로 이동시킨다
		 	
		 	
		 	int 45678 / int 1000 = 45.678 = 45
		 	*int에 실수가 들어갈 수 없기 때문에 소숫점 뒤에는 절삭 (truncate)
		 	
		 	45는 binary로 101101
		 	
		 	int는 4byte 즉 32bit이니 45는 binary로
		 	45      	= 0000 0000 0000 0000 0000 0000 0010 1101  (십진법: 45)
			45 << 1	 	= 0000 0000 0000 0000 0000 0000 0101 1010  (십진법: 90)
			45 << 2 	= 0000 0000 0000 0000 0000 0000 1011 0100  (십진법: 180)
			45 << 3 	= 0000 0000 0000 0000 0000 0001 0110 1000  (십진법: 360)
			45 << 4 	= 0000 0000 0000 0000 0000 0010 1101 0000  (십진법: 720)
			45 << 5 	= 0000 0000 0000 0000 0000 0101 1010 0000  (십진법: 1440)
			45 << 6 	= 0000 0000 0000 0000 0000 1011 0100 0000  (십진법: 2880)
			45 << 7 	= 0000 0000 0000 0000 0001 0110 1000 0000  (십진법: 5760)
			45 << 8 	= 0000 0000 0000 0000 0010 1101 0000 0000  (십진법: 11520)
			45 << 9 	= 0000 0000 0000 0000 0101 1010 0000 0000  (십진법: 23040)
			45 << 10 	= 0000 0000 0000 0000 1011 0100 0000 0000  (십진법: 46080)
			
			* 여기서 같은 << bitwise 작업을 할 의미가 없어지는데... 헤매던 상황에서 
			* 강사님 말씀: "워크샵 자바 Test03은 단순 산수입니다.  << 이동하고 결과 보고  - 로 빼기 넣어서 만드시면 됩니다.~~
			* 그래서 46080 - 1080 = 45000 
			* arithmetic operator가 bitwise operator보다 연산에서 우선이기 때문에 괄호로 우선순위 설정!
		*/
	}
		
}
